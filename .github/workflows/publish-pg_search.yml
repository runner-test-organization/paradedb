# workflows/publish-pg_search.yml
#
# Publish pg_search
# Build and publish the pg_search extension as .deb and .rpm to GitHub Releases.

name: Publish pg_search

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "The version to set for the pg_search release. This publishes the latest commit of the chosen branch and uploads it to the pre-existing GitHub Release of the provided version."
        required: true
        default: ""

concurrency:
  group: publish-pg_search-${{ github.head_ref || github.ref }}

# Used by actions/attest-build-provenance to sign the builds
permissions:
  id-token: write
  attestations: write

jobs:
  publish-pg_search:
    name: Publish pg_search for PostgreSQL ${{ matrix.pg_version }} on ${{ matrix.image }} ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    container:
      image: ${{ matrix.image }}
    strategy:
      fail-fast: false
      max-parallel: 8
      matrix:
        include:
          # Ubuntu 22.04
          - runner: ubuntu-latest
            image: ubuntu:22.04
            pg_version: 14
            arch: amd64
          - runner: ubuntu-latest
            image: ubuntu:22.04
            pg_version: 14
            arch: arm64
          - runner: ubuntu-latest
            image: ubuntu:22.04
            pg_version: 15
            arch: amd64
          - runner: ubuntu-latest
            image: ubuntu:22.04
            pg_version: 15
            arch: arm64
          - runner: ubuntu-latest
            image: ubuntu:22.04
            pg_version: 16
            arch: amd64
          - runner: ubuntu-latest
            image: ubuntu:22.04
            pg_version: 16
            arch: arm64
          - runner: ubuntu-latest
            image: ubuntu:22.04
            pg_version: 17
            arch: amd64
          - runner: ubuntu-latest
            image: ubuntu:22.04
            pg_version: 17
            arch: arm64
          # Ubuntu 24.04
          - runner: ubuntu-latest
            image: ubuntu:24.04
            pg_version: 14
            arch: amd64
          - runner: ubuntu-latest
            image: ubuntu:24.04
            pg_version: 14
            arch: arm64
          - runner: ubuntu-latest
            image: ubuntu:24.04
            pg_version: 15
            arch: amd64
          - runner: ubuntu-latest
            image: ubuntu:24.04
            pg_version: 15
            arch: arm64
          - runner: ubuntu-latest
            image: ubuntu:24.04
            pg_version: 16
            arch: amd64
          - runner: ubuntu-latest
            image: ubuntu:24.04
            pg_version: 16
            arch: arm64
          - runner: ubuntu-latest
            image: ubuntu:24.04
            pg_version: 17
            arch: amd64
          - runner: ubuntu-latest
            image: ubuntu:24.04
            pg_version: 17
            arch: arm64
          # Debian 12
          - runner: ubuntu-latest
            image: debian:12-slim
            pg_version: 14
            arch: amd64
          - runner: ubuntu-latest
            image: debian:12-slim
            pg_version: 14
            arch: arm64
          - runner: ubuntu-latest
            image: debian:12-slim
            pg_version: 15
            arch: amd64
          - runner: ubuntu-latest
            image: debian:12-slim
            pg_version: 15
            arch: arm64
          - runner: ubuntu-latest
            image: debian:12-slim
            pg_version: 16
            arch: amd64
          - runner: ubuntu-latest
            image: debian:12-slim
            pg_version: 16
            arch: arm64
          - runner: ubuntu-latest
            image: debian:12-slim
            pg_version: 17
            arch: amd64
          - runner: ubuntu-latest
            image: debian:12-slim
            pg_version: 17
            arch: arm64
          # Red Hat Enterprise Linux 8
          - runner: ubuntu-latest
            image: redhat/ubi8:latest
            pg_version: 14
            arch: amd64
          - runner: ubuntu-latest
            image: redhat/ubi8:latest
            pg_version: 14
            arch: arm64
          - runner: ubuntu-latest
            image: redhat/ubi8:latest
            pg_version: 15
            arch: amd64
          - runner: ubuntu-latest
            image: redhat/ubi8:latest
            pg_version: 15
            arch: arm64
          - runner: ubuntu-latest
            image: redhat/ubi8:latest
            pg_version: 16
            arch: amd64
          - runner: ubuntu-latest
            image: redhat/ubi8:latest
            pg_version: 16
            arch: arm64
          - runner: ubuntu-latest
            image: redhat/ubi8:latest
            pg_version: 17
            arch: amd64
          - runner: ubuntu-latest
            image: redhat/ubi8:latest
            pg_version: 17
            arch: arm64
          # Red Hat Enterprise Linux 9
          - runner: ubuntu-latest
            image: redhat/ubi9:latest
            pg_version: 14
            arch: amd64
          - runner: ubuntu-latest
            image: redhat/ubi9:latest
            pg_version: 14
            arch: arm64
          - runner: ubuntu-latest
            image: redhat/ubi9:latest
            pg_version: 15
            arch: amd64
          - runner: ubuntu-latest
            image: redhat/ubi9:latest
            pg_version: 15
            arch: arm64
          - runner: ubuntu-latest
            image: redhat/ubi9:latest
            pg_version: 16
            arch: amd64
          - runner: ubuntu-latest
            image: redhat/ubi9:latest
            pg_version: 16
            arch: arm64
          - runner: ubuntu-latest
            image: redhat/ubi9:latest
            pg_version: 17
            arch: amd64
          - runner: ubuntu-latest
            image: redhat/ubi9:latest
            pg_version: 17
            arch: arm64

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Install Debian Dependencies
        if: ${{ matrix.image == 'debian:11-slim' || matrix.image == 'debian:12-slim' || matrix.image == 'ubuntu:22.04' || matrix.image == 'ubuntu:24.04' }}
        run: DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y sudo wget curl gnupg lsb-release pkg-config libssl-dev jq

      - name: Install RHEL Dependencies
        if: ${{ matrix.image == 'redhat/ubi8:latest' || matrix.image == 'redhat/ubi9:latest' }}
        run: |
          # Determine RHEL version to retrieve the correct repositories
          if [ "${{ matrix.image }}" == "redhat/ubi8:latest" ]; then
            RHEL_VERSION=8
          elif [ "${{ matrix.image }}" == "redhat/ubi9:latest" ]; then
            RHEL_VERSION=9
          else
            echo "Unsupported RHEL version"
            exit 1
          fi

          # Install dependencies
          dnf install -y sudo wget gcc llvm-toolset pkgconf-pkg-config openssl-devel jq rpm-build

          # Add Oracle Linux ${RHEL_VERSION} repositories to enable epel-release
          sudo tee /etc/yum.repos.d/oracle-linux-ol${RHEL_VERSION}.repo > /dev/null <<EOF
          [ol${RHEL_VERSION}_baseos_latest]
          name=Oracle Linux ${RHEL_VERSION} BaseOS Latest (\$basearch)
          baseurl=https://yum.oracle.com/repo/OracleLinux/OL${RHEL_VERSION}/baseos/latest/\$basearch/
          gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-oracle
          gpgcheck=1
          enabled=1

          [ol${RHEL_VERSION}_appstream]
          name=Oracle Linux ${RHEL_VERSION} Application Stream (\$basearch)
          baseurl=https://yum.oracle.com/repo/OracleLinux/OL${RHEL_VERSION}/appstream/\$basearch/
          gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-oracle
          gpgcheck=1
          enabled=1

          [ol${RHEL_VERSION}_codeready_builder]
          name=Oracle Linux ${RHEL_VERSION} CodeReady Builder (\$basearch) - Unsupported
          baseurl=https://yum.oracle.com/repo/OracleLinux/OL${RHEL_VERSION}/codeready/builder/\$basearch/
          gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-oracle
          gpgcheck=1
          enabled=1
          EOF

          # Install epel-release, which is required by PostgreSQL via Perl-IPC-Run
          wget https://yum.oracle.com/RPM-GPG-KEY-oracle-ol${RHEL_VERSION} -O /etc/pki/rpm-gpg/RPM-GPG-KEY-oracle
          sudo dnf install -y epel-release

          # This package requires epel-release, which is why we install it last. It is required to
          # configure the build environment for creating the RPM package via rpmbuild
          sudo dnf install -y rpmdevtools

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # Note: We need to specify bash as the shell to ensure that it doesn't default to /bin/sh on Debian, which doesn't support the `[[` syntax
      - name: Retrieve OS & GitHub Tag Versions
        id: version
        shell: bash
        run: |
          if [ -z "${{ github.event.inputs.version }}" ]; then
            if [[ $GITHUB_REF == refs/tags/v* ]]; then
              VERSION=${GITHUB_REF#refs/tags/v}
            else
              # If there is no tag and no provided version, it's a test run and we set a default version
              VERSION="0.0.0"
            fi
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "GitHub Tag Version: $VERSION"
          echo "tag_version=$VERSION" >> $GITHUB_OUTPUT

          if [ -x "$(command -v lsb_release)" ]; then
            DISTRO=$(lsb_release -is | tr '[:upper:]' '[:lower:]')
            RELEASE=$(lsb_release -cs)
          else
            DISTRO=$(cat /etc/os-release | grep ^ID= | cut -d= -f2 | tr -d '"')
            RELEASE=$(cat /etc/os-release | grep ^VERSION_ID= | cut -d= -f2 | tr -d '"' | cut -d. -f1)
          fi
          if [ "$DISTRO" = "ubuntu" ]; then
            OS_VERSION="$RELEASE"
          elif [ "$DISTRO" = "debian" ]; then
            OS_VERSION="$RELEASE"
          elif [ "$DISTRO" = "rhel" ]; then
            OS_VERSION="el$RELEASE"
          else
            OS_VERSION="$DISTRO-$RELEASE"
          fi
          echo "OS Version: $OS_VERSION"
          echo "os_version=$OS_VERSION" >> $GITHUB_OUTPUT

          # RHEL uses different architecture and OS naming conventions when packaging via rpmbuid. We need to
          # retrieve those as well to programmatically retrieve and upload the correct RPM package
          if [[ "${{ matrix.image }}" == "redhat/ubi8:latest" || "${{ matrix.image }}" == "redhat/ubi9:latest" ]]; then
            if [ "${{ matrix.arch }}" == "amd64" ]; then
              ARCH=x86_64
            else
              ARCH=aarch64
            fi
            echo "RPM Arch: $ARCH"
            echo "rpm_arch=$ARCH" >> $GITHUB_OUTPUT
          fi

      - name: Install & Configure Supported PostgreSQL Version on Debian
        if: ${{ matrix.image == 'debian:11-slim' || matrix.image == 'debian:12-slim' || matrix.image == 'ubuntu:22.04' || matrix.image == 'ubuntu:24.04' }}
        run: |
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo DEBIAN_FRONTEND=noninteractive apt-get update && sudo DEBIAN_FRONTEND=noninteractive apt-get install -y postgresql-${{ matrix.pg_version }} postgresql-server-dev-${{ matrix.pg_version }} debhelper devscripts dput gnupg
          sudo chown -R $(whoami) /usr/share/postgresql/${{ matrix.pg_version }}/ /usr/lib/postgresql/${{ matrix.pg_version }}/ /var/lib/postgresql/${{ matrix.pg_version }}/
          echo "/usr/lib/postgresql/${{ matrix.pg_version }}/bin" >> $GITHUB_PATH

      - name: Install & Configure Supported PostgreSQL Version on RHEL
        if: ${{ matrix.image == 'redhat/ubi8:latest' || matrix.image == 'redhat/ubi9:latest' }}
        run: |
          # Determine RHEL version to retrieve the correct repositories
          if [ "${{ matrix.image }}" == "redhat/ubi8:latest" ]; then
            RHEL_VERSION=8
          elif [ "${{ matrix.image }}" == "redhat/ubi9:latest" ]; then
            RHEL_VERSION=9
          else
            echo "Unsupported RHEL version"
            exit 1
          fi

          # Install the repository RPM:
          sudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-${RHEL_VERSION}-${{ steps.version.outputs.rpm_arch }}/pgdg-redhat-repo-latest.noarch.rpm

          # Disable the built-in PostgreSQL module:
          sudo dnf -qy module disable postgresql

          # Install PostgreSQL:
          sudo dnf install -y postgresql${{ matrix.pg_version }} postgresql${{ matrix.pg_version }}-server postgresql${{ matrix.pg_version }}-devel

      - name: Extract pgrx Version
        id: pgrx
        working-directory: pg_search/
        run: echo version=$(cargo tree --depth 1 -i pgrx -p pg_search | head -n 1 | cut -f2 -dv) >> $GITHUB_OUTPUT

      - name: Install pgrx
        run: cargo install --locked cargo-pgrx --version ${{ steps.pgrx.outputs.version }} --debug

      # Note: We need to specify bash as the shell to ensure that it doesn't default to /bin/sh on Debian, which doesn't support the `[[` syntax
      - name: Initialize pgrx for Current PostgreSQL Version
        working-directory: pg_search/
        shell: bash
        run: |
          if [[ "${{ matrix.image }}" == "redhat/ubi8:latest" || "${{ matrix.image }}" == "redhat/ubi9:latest" ]]; then
            PG_CONFIG_PATH="/usr/pgsql-${{ matrix.pg_version }}/bin/pg_config"
          else
            PG_CONFIG_PATH="/usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_config"
          fi
          cargo pgrx init --pg${{ matrix.pg_version }}=$PG_CONFIG_PATH

      # TODO: Enable --features icu on RHEL
      - name: Package pg_search Extension with pgrx
        working-directory: pg_search/
        run: |
          if [[ "${{ matrix.image }}" == "redhat/ubi8:latest" || "${{ matrix.image }}" == "redhat/ubi9:latest" ]]; then
            PG_CONFIG_PATH="/usr/pgsql-${{ matrix.pg_version }}/bin/pg_config"
            cargo pgrx package --pg-config $PG_CONFIG_PATH
          else
            PG_CONFIG_PATH="/usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_config"
            cargo pgrx package --pg-config $PG_CONFIG_PATH --features icu
          fi
