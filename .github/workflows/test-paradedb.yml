# workflows/test-paradedb.yml
#
# Test ParadeDB
# Test building the ParadeDB Docker Image using Docker Compose.

name: Test ParadeDB

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
      - dev
    paths:
      - ".github/workflows/test-paradedb.yml"
      - "docker/**"
  workflow_dispatch:

concurrency:
  group: test-paradedb-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  test-paradedb:
    name: Test ParadeDB Docker Image
    runs-on: blacksmith-8vcpu-ubuntu-2204
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Set up Environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "Using prod configuration..."
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "Using dev configuration..."
          fi

      - name: Login to Docker Hub
        if: steps.env.outputs.environment == 'prod'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx with Build Cloud
        if: steps.env.outputs.environment == 'prod'
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          version: lab:latest
          driver: cloud
          endpoint: ${{ secrets.DOCKERHUB_USERNAME }}/paradedb
          install: true

      # We only build with Docker Build Cloud when promoting to `main` as doing so requires access to GitHub Secrets,
      # which community contributors don't have access to.
      #
      # We keep PARADEDB_TELEMETRY=true to test the telemetry feature, even though this isn't real usage.
      - name: Build the ParadeDB Docker Image (prod only)
        if: steps.env.outputs.environment == 'prod'
        uses: docker/build-push-action@v6
        with:
          context: .
          build-args: |
            POSTHOG_API_KEY=${{ secrets.POSTHOG_API_KEY }}
            POSTHOG_HOST=${{ secrets.POSTHOG_HOST }}
            COMMIT_SHA=testcommitsha
            PARADEDB_TELEMETRY=true
          platforms: linux/amd64,linux/arm64
          file: docker/Dockerfile
          push: false # Don't push to Docker Hub
          load: true # Load the image into the Docker daemon of the runner
          tags: paradedb/paradedb:latest # Tag the local image as latest so it gets picked up by Docker Compose
          outputs: "type=cacheonly" # Export results to the build cache

      # On any branch other than `main`, we build the ParadeDB Docker Image using Docker Compose so that community
      # contributors can trigger the workflow without needing access to GitHub Secrets.
      #
      # In this environment, PARADEDB_TELEMETRY is set to false to avoid sending misleading telemetry data to PostHog.
      - name: Build the ParadeDB Docker Image via Docker Compose (dev only)
        if: steps.env.outputs.environment == 'dev'
        working-directory: docker/
        run: docker build --file Dockerfile --tag paradedb/paradedb:latest ..

      # Sleep 10 seconds to give time for Postgres to start inside the container. The docker-compose.yml file
      # will use the local ParadeDB image that we just built.
      - name: Start the ParadeDB Docker Image
        working-directory: docker/
        run: docker compose -f docker-compose.yml up -d && sleep 10

      # We run the container in detached mode, and grep for the word ERROR to see if it failed to start correctly
      - name: Check for Errors in the ParadeDB Docker Image
        working-directory: docker/
        run: |
          CONTAINER_ID=$(docker ps -aq --filter "name=paradedb")
          CONTAINER_STATUS=$(docker inspect -f '{{.State.Status}}' $CONTAINER_ID)
          echo "paradedb container ID: $CONTAINER_ID"
          echo "Container status: $CONTAINER_STATUS"

          echo ""
          echo "Printing logs for the ParadeDB Docker container..."
          docker logs $CONTAINER_ID

          # Fail the run if the container failed to start
          if [ "$CONTAINER_STATUS" = "exited" ]; then
            echo "Error: Container failed to start properly"
            exit 1
          fi

          # Fail the run if there are any Postgres ERRORs in the logs
          if docker logs $CONTAINER_ID | grep -q ERROR; then
            echo "Error: ParadeDB Docker container logs contain an error"
            exit 1
          fi

  # Only run this job on the `main` branch since it requires access to GitHub Secrets, which
  # community contributors don't have access to.
  test-paradedb-helm-chart:
    name: Test ParadeDB Helm Chart
    runs-on: blacksmith-2vcpu-ubuntu-2204
    if: github.event.pull_request.draft == false && github.event.pull_request.base.ref == 'main'

    steps:
      - name: Trigger paradedb/charts Test Workflow
        uses: benc-uk/workflow-dispatch@v1.2.4
        with:
          token: ${{ secrets.GHA_CREATE_RELEASE_PAT }}
          workflow: paradedb-test-eks.yml
          repo: paradedb/charts
          ref: main

      - name: Wait for paradedb/charts Test Workflow to Complete
        run: |
          workflow_run_id=""
          while [ -z "$workflow_run_id" ]; do
            workflow_run_id=$(curl -s -H "Authorization: token ${{ secrets.GHA_CREATE_RELEASE_PAT }}" \
              https://api.github.com/repos/paradedb/charts/actions/workflows/paradedb-test-eks.yml/runs?event=workflow_dispatch \
              | jq -r '.workflow_runs[] | select(.status == "in_progress" or .status == "queued") | .id' | head -n 1)
            if [ -z "$workflow_run_id" ]; then
              echo "Waiting for workflow run to start..."
              sleep 10
            fi
          done

          status="in_progress"
          while [ "$status" != "completed" ]; do
            status=$(curl -s -H "Authorization: token ${{ secrets.GHA_CREATE_RELEASE_PAT }}" \
              https://api.github.com/repos/paradedb/charts/actions/runs/$workflow_run_id \
              | jq -r '.status')
            echo "Current status: $status"
            if [ "$status" != "completed" ]; then
              sleep 10
            fi
          done

          conclusion=$(curl -s -H "Authorization: token ${{ secrets.GHA_CREATE_RELEASE_PAT }}" \
            https://api.github.com/repos/paradedb/charts/actions/runs/$workflow_run_id \
            | jq -r '.conclusion')
          echo "Workflow completed with conclusion: $conclusion"
          if [ "$conclusion" != "success" ]; then
            exit 1
          fi
